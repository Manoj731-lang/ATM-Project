import os

USER_DATA_FILE = 'user_data.txt'

# Initialize user data (Only once)
def initialize_user_data():
    if not os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, 'w') as file:
            file.write('1234,1000')  # Default PIN: 1234, Balance: 1000

# Load user data from file
def load_user_data():
    with open(USER_DATA_FILE, 'r') as file:
        pin, balance = file.read().strip().split(',')
    return pin, float(balance)

# Save user data to file
def save_user_data(pin, balance):
    with open(USER_DATA_FILE, 'w') as file:
        file.write(f'{pin},{balance}')

# Authenticate user
def authenticate():
    for attempt in range(3):
        entered_pin = input("Enter your 4-digit PIN: ")
        correct_pin, _ = load_user_data()
        if entered_pin == correct_pin:
            print("Authentication successful!\n")
            return True
        else:
            print(f"Incorrect PIN. Attempts left: {2 - attempt}")
    print("Too many incorrect attempts. Exiting.")
    return False

# Show main menu
def show_menu():
    print("\n====== ATM Menu ======")
    print("1. Check Balance")
    print("2. Deposit Money")
    print("3. Withdraw Money")
    print("4. Exit")

# Handle user operations
def atm_operations():
    while True:
        show_menu()
        choice = input("Choose an option (1-4): ")

        _, balance = load_user_data()

        if choice == '1':
            print(f"\nYour current balance is: ${balance:.2f}")

        elif choice == '2':
            try:
                amount = float(input("Enter amount to deposit: $"))
                if amount <= 0:
                    raise ValueError
                balance += amount
                save_user_data('1234', balance)
                print(f"Deposited ${amount:.2f}. New balance: ${balance:.2f}")
            except ValueError:
                print("Invalid input. Please enter a positive number.")

        elif choice == '3':
            try:
                amount = float(input("Enter amount to withdraw: $"))
                if amount <= 0:
                    raise ValueError
                if amount > balance:
                    print("Insufficient funds.")
                else:
                    balance -= amount
                    save_user_data('1234', balance)
                    print(f"Withdrew ${amount:.2f}. New balance: ${balance:.2f}")
            except ValueError:
                print("Invalid input. Please enter a positive number.")

        elif choice == '4':
            print("Thank you for using the ATM. Goodbye!")
            break

        else:
            print("Invalid choice. Please select from 1 to 4.")

# Main driver
def main():
    initialize_user_data()
    if authenticate():
        atm_operations()

if __name__ == '__main__':
    main()
